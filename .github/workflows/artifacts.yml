name: artifacts

on:
  push:
    tags:
      - v*

jobs:
  main_android_dist_ci:
    name: main_android_dist_ci
    runs-on: macOS-latest
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: actions/setup-java@v1
        with:
          java-version: '8'
          java-package: jdk
          architecture: x64
      - run: ./ci/mac_ci_setup.sh
        name: 'Install dependencies'
      - name: 'Build envoy.aar distributable'
        run: |
          current_short_commit=$(git rev-parse --short HEAD)
          bazelisk build \
              --config=release-android \
              --fat_apk_cpu=x86 \
              --define=pom_version=main-$current_short_commit \
              //:android_dist_ci
      - name: 'Tar artifacts'
        run: tar -czvf envoy_mobile.tar.gz dist/envoy.aar dist/envoy-pom.xml dist/envoy-javadoc.jar dist/envoy-sources.jar
      - uses: actions/upload-artifact@v2
        with:
          name: envoy_android_aar_sources
          path: ./envoy_mobile.tar.gz

  android_aar_sonatype_deploy:
    name: android_deploy
    needs: main_android_dist_ci
    runs-on: ubuntu-18.04
    timeout-minutes: 240
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: actions/download-artifact@v2
        with:
          name: envoy_android_aar_sources
          path: dist/
      - run: tar -xvf dist/envoy_mobile.tar.gz
      - name: 'Configure envoy-bot git user'
        run: |
          # Switch global user to be envoy-bot for deployment
          git config --global user.email "envoy-bot@users.noreply.github.com"
          git config --global user.name "envoy-bot"
      - name: 'Configure gpg signing'
        env:
          GPG_KEY: ${{ secrets.gpg_key }}
          GPG_KEY_NAME: ${{ secrets.gpg_key_name }}
          GPG_PASSPHRASE: ${{ secrets.gpg_passphrase }}
        run: |
          # https://github.com/keybase/keybase-issues/issues/2798
          export GPG_TTY=$(tty)
          # Import gpg keys and warm the passphrase to avoid the gpg
          # passphrase prompt when initating a deploy
          # `--pinentry-mode=loopback` could be needed to ensure we
          # suppress the gpg prompt
          echo $GPG_KEY | base64 --decode > signing-key
          gpg --passphrase $GPG_PASSPHRASE --batch --import signing-key
          shred signing-key

          gpg --pinentry-mode=loopback --passphrase $GPG_PASSPHRASE -ab dist/envoy.aar
          gpg --pinentry-mode=loopback --passphrase $GPG_PASSPHRASE -ab dist/envoy-pom.xml
          gpg --pinentry-mode=loopback --passphrase $GPG_PASSPHRASE -ab dist/envoy-javadoc.jar
          gpg --pinentry-mode=loopback --passphrase $GPG_PASSPHRASE -ab dist/envoy-sources.jar
      - name: 'Release to sonatype repository'
        env:
          READWRITE_USER: ${{ secrets.sonatype_user }}
          READWRITE_API_KEY: ${{ secrets.sonatype_password }}
          ENVOY_PROXY_PROFILE_ID: ${{ secrets.envoy_proxy_profile_id }}
        run: |
          current_release_tag=$(git describe --tags --abbrev=0 --exact-match)
          python dist/sonatype_nexus_upload.py \
            --profile_id=$ENVOY_PROXY_PROFILE_ID \
            --version="${current_release_tag:1}" \
            --files \
                dist/envoy.aar \
                dist/envoy-pom.xml \
                dist/envoy-sources.jar \
                dist/envoy-javadoc.jar \
          --signed_files \
                dist/envoy-sources.jar.asc \
                dist/envoy.aar.asc \
                dist/envoy-pom.xml.asc \
                dist/envoy-javadoc.jar.asc

  main_ios_dist:
    name: main_ios_dist
    runs-on: macOS-latest
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: 'Install dependencies'
        run: ./ci/mac_ci_setup.sh
      - name: 'Build Envoy.framework distributable'
        run: bazelisk build --config=release-ios --ios_multi_cpus=i386,x86_64,armv7,arm64 //:ios_dist
      - name: 'Create temporary directory for artifact to produce properly named zip'
        run: mkdir -p dist/ios_artifact/Envoy.framework
      - name: 'Move artifact to directory for zipping'
        run: mv dist/Envoy.framework/* dist/ios_artifact/Envoy.framework
      - uses: actions/upload-artifact@v2
        with:
          name: envoy_ios_framework
          path: dist/ios_artifact

  main_ios_cocoapods:
    name: main_ios_cocoapods
    runs-on: macOS-latest
    timeout-minutes: 45
    needs: [main_ios_dist]
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - name: 'Install dependencies'
        run: ./ci/mac_ci_setup.sh
      - uses: actions/download-artifact@v2
        with:
          name: envoy_ios_framework
          path: dist/envoy_ios_cocoapods
      - name: 'Copy license for CocoaPods'
        run: cp LICENSE dist/envoy_ios_cocoapods
      - name: 'Create empty Swift sources directory'
        run: mkdir -p dist/envoy_ios_cocoapods/Envoy.framework/Swift
      - name: 'Create empty Swift file to force Swift libraries to link properly'
        run: touch dist/envoy_ios_cocoapods/Envoy.framework/Swift/Empty.swift
      - uses: actions/upload-artifact@v2
        with:
          name: envoy_ios_cocoapods
          path: dist/envoy_ios_cocoapods
