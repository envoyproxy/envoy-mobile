name: ios_build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  iosbuild:
    name: ios_build
    runs-on: macos-11
    timeout-minutes: 120
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - uses: actions/cache@v2
        id: check-cache
        with:
          key: framework-${{ github.sha }}
          path: dist/Envoy.framework
        name: 'Check cache'
      - run: echo "Found Envoy.framework from previous run!"
        if: steps.check-cache.outputs.cache-hit == 'true'
        name: 'Build cache hit'
      - run: ./ci/mac_ci_setup.sh
        if: steps.check-cache.outputs.cache-hit != 'true'
        name: 'Install dependencies'
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ./bazelw shutdown
          ./bazelw build --config=ios --config=remote-ci-macos --remote_header="Authorization=Bearer $GITHUB_TOKEN" //:ios_dist
        if: steps.check-cache.outputs.cache-hit != 'true'
        name: 'Build Envoy.framework distributable'
  swifthelloworld:
    name: swift_helloworld
    needs: iosbuild
    runs-on: macos-11
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - run: ./ci/mac_ci_setup.sh
        name: 'Install dependencies'
      - uses: actions/cache@v2
        id: check-cache
        with:
          key: framework-${{ github.sha }}
          path: dist/Envoy.framework
        name: 'Download framework'
      - run: exit 1
        if: steps.check-cache.outputs.cache-hit != 'true'
        name: 'Short-circuit'
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./bazelw build --config=ios --config=remote-ci-macos --remote_header="Authorization=Bearer $GITHUB_TOKEN" //examples/swift/hello_world:app
        name: 'Build swift app'
      # Run the app in the background and redirect logs.
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./bazelw run --config=ios --config=remote-ci-macos --remote_header="Authorization=Bearer $GITHUB_TOKEN" //examples/swift/hello_world:app &> /tmp/envoy.log &
        name: 'Run swift app'
      - run: sed '/received headers with status 200/q' <(touch /tmp/envoy.log && tail -F /tmp/envoy.log)
        name: 'Check connectivity'
      - run: cat /tmp/envoy.log
        if: ${{ failure() || cancelled() }}
        name: 'Log app run'
  swiftasyncawait:
    name: swift_async_await
    needs: iosbuild
    runs-on: macos-11
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - run: ./ci/mac_ci_setup.sh
        name: 'Install dependencies'
      - uses: actions/cache@v2
        id: check-cache
        with:
          key: framework-${{ github.sha }}
          path: dist/Envoy.framework
        name: 'Download framework'
      - run: exit 1
        if: steps.check-cache.outputs.cache-hit != 'true'
        name: 'Short-circuit'
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./bazelw build --config=ios --config=remote-ci-macos --remote_header="Authorization=Bearer $GITHUB_TOKEN" //examples/swift/async_await:app
        name: 'Build swift app'
      # Run the app in the background and redirect logs.
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./bazelw run --config=ios --config=remote-ci-macos --remote_header="Authorization=Bearer $GITHUB_TOKEN" //examples/swift/async_await:app &> /tmp/envoy.log &
        name: 'Run swift app'
      - run: sed '/\[2\] Uploaded 7 MB of data/q' <(touch /tmp/envoy.log && tail -F /tmp/envoy.log)
        name: 'Check upload succeeded'
      - run: cat /tmp/envoy.log
        if: ${{ failure() || cancelled() }}
        name: 'Log app run'
  objchelloworld:
    name: objc_helloworld
    needs: iosbuild
    runs-on: macos-11
    timeout-minutes: 25
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true
      - run: ./ci/mac_ci_setup.sh
        name: 'Install dependencies'
      - uses: actions/cache@v2
        id: check-cache
        with:
          key: framework-${{ github.sha }}
          path: dist/Envoy.framework
        name: 'Download framework'
      - run: exit 1
        if: steps.check-cache.outputs.cache-hit != 'true'
        name: 'Short-circuit'
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./bazelw build --config=ios --config=remote-ci-macos --remote_header="Authorization=Bearer $GITHUB_TOKEN" //examples/objective-c/hello_world:app
        name: 'Build objective-c app'
      # Run the app in the background and redirect logs.
      - env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./bazelw run --config=ios --config=remote-ci-macos --remote_header="Authorization=Bearer $GITHUB_TOKEN" //examples/objective-c/hello_world:app &> /tmp/envoy.log &
        name: 'Run objective-c app'
      - run: sed '/received headers with status 200/q' <(touch /tmp/envoy.log && tail -F /tmp/envoy.log)
        name: 'Check connectivity'
      - run: cat /tmp/envoy.log
        if: ${{ failure() || cancelled() }}
        name: 'Log app run'
