resources:
  containers:
  - container: envoy-container
    image: envoyproxy/envoy-build:cfc514546bc0284536893cca5fa43d7128edcd35
  - container: swiftlint-container
    image: norionomura/swiftlint:0.33.0_swift-5.0
  - container: jdk8
    image: openjdk:8-jdk

trigger:
- master

stages:
  # - stage: format
  #   dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel.
  #   jobs:
  #     - job: all_lint
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'Ubuntu 16.04'
  #       container: envoy-container
  #       variables:
  #         buildifier_bin: /usr/local/bin/buildifier
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./tools/check_format.sh
  #           displayName: 'Run formatters'
  #     - job: precommit_lint
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'macos-10.14'
  #       steps:
  #         - checkout: self
  #         - script: brew install pre-commit
  #           displayName: 'Install pre-commit'
  #         - script: pre-commit run --all-files
  #           displayName: 'Running pre-commit'
  #     - job: swift_lint
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'Ubuntu 16.04'
  #       container: swiftlint-container
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: swiftlint lint --strict
  #           displayName: 'Run SwiftLint'
  #     - job: kotlin_lint
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'Ubuntu 16.04'
  #       container: jdk8
  #       steps:
  #         - checkout: self
  #         - script: ./ci/kotlin_lint.sh
  #           displayName: 'Run Kotlin lint'
  - stage: android
    dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel.
    jobs:
  #     - job: linux_dist
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'Ubuntu 16.04'
  #       variables:
  #         android_ndk_home: /usr/local/lib/android/sdk/ndk-bundle
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./ci/linux_ci_setup.sh
  #           displayName: 'Install dependencies'
  #         - script: |
  #             export PATH=/usr/lib/llvm-8/bin:$PATH
  #             export CC=clang
  #             export CXX=clang++
  #           displayName: 'Set up clang toolchain'
  #         - script: |
  #             bazel build --fat_apk_cpu=x86 //:android_dist
  #           displayName: 'Build envoy.aar distributable'
  #         - task: PublishPipelineArtifact@0
  #           displayName: 'Publish envoy.aar distributable'
  #           inputs:
  #             artifactName: 'envoy-linux.aar'
  #             targetPath: 'dist/envoy.aar'
  #     - job: linux_java_helloworld
  #       dependsOn: linux_dist
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'Ubuntu 16.04'
  #       variables:
  #         android_ndk_home: /usr/local/lib/android/sdk/ndk-bundle
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./ci/linux_ci_setup.sh
  #           displayName: 'Install dependencies'
  #         - task: DownloadPipelineArtifact@0
  #           displayName: 'Download envoy.aar distributable'
  #           inputs:
  #             artifactName: 'envoy-linux.aar'
  #             targetPath: dist
  #         - script: bazel build --fat_apk_cpu=x86 //examples/java/hello_world:hello_envoy
  #           displayName: 'Build java app'
  #     - job: linux_kotlin_helloworld
  #       dependsOn: linux_dist
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'Ubuntu 16.04'
  #       variables:
  #         android_ndk_home: /usr/local/lib/android/sdk/ndk-bundle
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./ci/linux_ci_setup.sh
  #           displayName: 'Install dependencies'
  #         - task: DownloadPipelineArtifact@0
  #           displayName: 'Download envoy.aar distributable'
  #           inputs:
  #             artifactName: 'envoy-linux.aar'
  #             targetPath: dist
  #         - script: bazel build --fat_apk_cpu=x86 //examples/kotlin/hello_world:hello_envoy_kt
  #           displayName: 'Build kotlin app'
  #     - job: mac_dist
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'macos-10.14'
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./ci/mac_ci_setup.sh
  #           displayName: 'Install dependencies'
  #         - script: bazel build --fat_apk_cpu=x86 //:android_dist
  #           displayName: 'Build envoy.aar distributable'
  #         - task: PublishPipelineArtifact@0
  #           displayName: 'Publish envoy.aar distributable'
  #           inputs:
  #             artifactName: 'envoy-mac.aar'
  #             targetPath: 'dist/envoy.aar'
  #     - job: mac_java_helloworld
  #       dependsOn: mac_dist
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'macos-10.14'
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./ci/mac_ci_setup.sh
  #           displayName: 'Install dependencies'
  #         - task: DownloadPipelineArtifact@0
  #           displayName: 'Download envoy.aar distributable'
  #           inputs:
  #             artifactName: 'envoy-mac.aar'
  #             targetPath: dist
  #         - script: bazel build --fat_apk_cpu=x86 //examples/java/hello_world:hello_envoy
  #           displayName: 'Build java app'
  #     - job: mac_kotlin_helloworld
  #       dependsOn: mac_dist
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'macos-10.14'
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./ci/mac_ci_setup.sh
  #           displayName: 'Install dependencies'
  #         - task: DownloadPipelineArtifact@0
  #           displayName: 'Download envoy.aar distributable'
  #           inputs:
  #             artifactName: 'envoy-mac.aar'
  #             targetPath: dist
  #         - script: bazel build --fat_apk_cpu=x86 //examples/kotlin/hello_world:hello_envoy_kt
  #           displayName: 'Build kotlin app'
      - job: mac_kotlin_helloworld
        timeoutInMinutes: 60
        pool:
          vmImage: 'macos-10.14'
        steps:
          - checkout: self
            submodules: true
          - bash: |
              $ANDROID_HOME/tools/bin/sdkmanager --list
            displayName: "list already installed Android packages"
          - bash: |
              echo "y" | $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-27;google_apis;x86'
            displayName: 'install Android image'
          - script: |
              $ANDROID_HOME/emulator/emulator -list-avds
              echo '---'
              echo "no" | $ANDROID_HOME/tools/bin/avdmanager create avd -n test_android_emulator -k 'system-images;android-27;google_apis;x86' --force
              echo '---'
              $ANDROID_HOME/emulator/emulator -list-avds
            displayName: 'create AVD'
          - script: |
              $ANDROID_HOME/platform-tools/adb devices
              echo '---'
              nohup $ANDROID_HOME/emulator/emulator -avd test_android_emulator -no-snapshot > /dev/null 2>&1 & $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
              echo '---'
              $ANDROID_HOME/platform-tools/adb devices
            displayName: 'start Android emulator'
  # - stage: ios
  #   dependsOn: [] # this removes the implicit dependency on previous stage and causes this to run in parallel.
  #   jobs:
  #     - job: mac_dist
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'macos-10.14'
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./ci/mac_ci_setup.sh
  #           displayName: 'Install dependencies'
  #         - script: bazel build --config=ios //:ios_dist
  #           displayName: 'Build Envoy.framework distributable'
  #         - task: PublishPipelineArtifact@0
  #           displayName: 'Publish Envoy.framework distributable'
  #           inputs:
  #             artifactName: 'Envoy.framework'
  #             targetPath: 'dist/Envoy.framework'
  #     - job: mac_objc_helloworld
  #       dependsOn: mac_dist
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'macos-10.14'
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./ci/mac_ci_setup.sh
  #           displayName: 'Install dependencies'
  #         - script: mkdir -p dist/Envoy.framework
  #           displayName: 'Create directory for distributable'
  #         - task: DownloadPipelineArtifact@0
  #           displayName: 'Download Envoy.framework distributable'
  #           inputs:
  #             artifactName: Envoy.framework
  #             targetPath: dist/Envoy.framework
  #         - script: bazel build --config=ios //examples/objective-c/hello_world:app
  #           displayName: 'Build objective-c app'
  #     - job: mac_swift_helloworld
  #       dependsOn: mac_dist
  #       timeoutInMinutes: 60
  #       pool:
  #         vmImage: 'macos-10.14'
  #       steps:
  #         - checkout: self
  #           submodules: true
  #         - script: ./ci/mac_ci_setup.sh
  #           displayName: 'Install dependencies'
  #         - script: mkdir -p dist/Envoy.framework
  #           displayName: 'Create directory for distributable'
  #         - task: DownloadPipelineArtifact@0
  #           displayName: 'Download Envoy.framework distributable'
  #           inputs:
  #             artifactName: Envoy.framework
  #             targetPath: dist/Envoy.framework
  #         - script: bazel build --config=ios //examples/swift/hello_world:app
  #           displayName: 'Build swift app'
